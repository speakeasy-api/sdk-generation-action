# action.yml
name: Speakeasy Client SDK Generation Action
description: The Speakeasy Generation Action isto be run via the workflows provided in this repo and is not intended to be run directly.
inputs:
  speakeasy_version:
    description: The version of the Speakeasy CLI to use or "latest"
    default: latest
    required: false
  openapi_doc_location:
    description: The location of the OpenAPI document to use, either a relative path within the repo or a URL to a publicly hosted document
    required: false
    deprecationMessage: "This input is deprecated, please use the `openapi_docs` input instead."
  openapi_doc_auth_header:
    description: |-
      The auth header to use when fetching the OpenAPI document if it is not publicly hosted. For example `Authorization`.
      If using a private speakeasy hosted document use `x-api-key`. This header will be populated with the openapi_doc_auth_token provided.
    required: false
  openapi_doc_auth_token:
    description: The auth token to use when fetching the OpenAPI document if it is not publicly hosted. For example `Bearer <token>` or `<token>`.
    required: false
  openapi_docs:
    description: |-
      A yaml string containing a list of OpenAPI documents to use, if multiple documents are provided they will be merged together, prior to generation.

      If the document lives within the repo a relative path can be provided, if the document is hosted publicly a URL can be provided.

      If the documents are hosted privately a URL can be provided along with the `openapi_doc_auth_header` and `openapi_doc_auth_token` inputs.
      Each document will be fetched using the provided auth header and token, so they need to be valid for all documents.

      For example:
      openapi_docs: |
        - https://example.com/openapi1.json
        - https://example.com/openapi2.json
    required: false
  github_access_token:
    description: A GitHub access token with write access to the repo
    required: true
  languages:
    description: |-
      A yaml string containing a list of languages to generate SDKs for example:
      languages: |
        - go: ./go-sdk # specifying a output directory
        - python # using default output of ./python-client-sdk
        - typescript # using default output of ./typescript-client-sdk
        - java # using default output of ./java-client-sdk
        - php # using default output of ./php-client-sdk
        - ruby # using default output of ./ruby-client-sdk

      If multiple languages are present we will treat this repo as a mono repo, if a single language is present as a single language repo and generate the sdk
      in the root of the repo if not path is provided.
    required: true
  create_release:
    description: "Create a Github release on generation"
    default: "true"
    required: false
  publish_python:
    description: "Whether the Python SDK will be published to PyPi"
    default: "false"
    required: false
  publish_typescript:
    description: "Whether the Typescript SDK will be published to NPM"
    default: "false"
    required: false
  publish_terraform:
    description: "Whether the Terraform Provider will be published to the Terraform Registry"
    default: "false"
    required: false
  publish_php:
    description: "Whether the PHP SDK will be published to Packagist this will also create a release on Github"
    default: "false"
    required: false
  publish_ruby:
    description: "Whether the Ruby SDK will be published to Rubygems"
    default: "false"
    required: false
  publish_java:
    description: "Whether the Java SDK will be published to the provided OSSRH URL"
    default: "false"
    required: false
  speakeasy_api_key:
    description: "The Speakeasy API key to authenticate the Speakeasy CLI with"
    required: true
  force:
    description: "Force the SDK to be regenerated"
    default: "false"
    required: false
  mode:
    description: |-
      The mode to run the workflow in when using the 'generate' action, valid options are 'direct' or 'pr', defaults to 'direct'.
      This is intended to be used along with the `action` input to determine the current action step to run.
        - 'direct' mode will generally create a branch to generate the SDK on then merge this directly to the branch the workflow is configure to run on (normally 'main' or 'master') after compilation is successful.
        - 'pr' will create a branch to generate the SDK on then create a pull request to merge this branch to the branch the workflow is configure to run on (normally 'main' or 'master') after compilation is successful.
      See documentation for more details.
    default: "direct"
    required: false
  action:
    description: |-
      The current action step to run, valid options are 'validate', 'generate', 'finalize' or 'release', defaults to 'generate'.
      This is intended to be used along with the `mode` input to determine the current action step to run.
        - 'validate' will validate the OpenAPI document and return addressable warnings and errors.
        - 'generate' will generate the SDK and commit the changes to the branch.
        - 'finalize' depending on mode will either merge the branch to the branch the workflow is configure to run on (normally 'main' or 'master') or create a pull request.
        - 'release' will create a release on Github.
  branch_name:
    description: "The name of the branch to finalize, only used for the 'finalize' action step."
    required: false
  previous_gen_version:
    description: "The version of the previous generation, only used for the 'finalize' action step."
    required: false
  output_tests:
    description: "Internal use only"
    required: false
  speakeasy_server_url:
    description: "Internal use only"
    required: false
  write_suggestions:
      description: "Set to 'True' if you want to receive PRs with OpenAPI suggestions"
      required: false
  openai_api_key:
    description: "The OpenAI API key to authenticate to access LLM suggestions"
    required: false
  working_directory:
    description: 'The working directory for the action'
    required: false
outputs:
  python_regenerated:
    description: "true if the Python SDK was regenerated"
  python_directory:
    description: "The directory the Python SDK was generated to"
  typescript_regenerated:
    description: "true if the Typescript SDK was regenerated"
  typescript_directory:
    description: "The directory the Typescript SDK was generated to"
  go_regenerated:
    description: "true if the Go SDK was regenerated"
  go_directory:
    description: "The directory the Go SDK was generated to"
  java_regenerated:
    description: "true if the Java SDK was regenerated"
  java_directory:
    description: "The directory the Java SDK was generated to"
  terraform_regenerated:
    description: "true if the Terraform Provider was regenerated"
  terraform_directory:
    description: "The directory the Terraform Provider was generated to"
  php_regenerated:
    description: "true if the PHP SDK was regenerated"
  php_directory:
    description: "The directory the PHP SDK was generated to"
  ruby_regenerated:
    description: "true if the Ruby SDK was regenerated"
  ruby_directory:
    description: "The directory the Ruby SDK was generated to"
  branch_name:
    description: "The name of the branch the SDK was generated on"
  commit_hash:
    description: "The commit hash of the merge commit into main if using 'direct' mode"
  previous_gen_version:
    description: "The version of the previous generation"
  openapi_doc:
    description: "The location of the OpenAPI document used for generation"
runs:
  using: "docker"
  image: "docker://ghcr.io/speakeasy-api/sdk-generation-action:v14"
  env:
    SPEAKEASY_API_KEY: ${{ inputs.speakeasy_api_key }}
    SPEAKEASY_SERVER_URL: ${{ inputs.speakeasy_server_url }}
    OPENAI_API_KEY: ${{ inputs.openai_api_key }}
  args:
    - ${{ inputs.speakeasy_version }}
    - ${{ inputs.openapi_doc_location }}
    - ${{ inputs.github_access_token }}
    - ${{ inputs.languages }}
    - ${{ inputs.create_release }}
    - ${{ inputs.publish_python }}
    - ${{ inputs.publish_typescript }}
    - ${{ inputs.publish_php }}
    - ${{ inputs.publish_ruby }}
    - ${{ inputs.publish_java }}
    - ${{ inputs.publish_terraform }}
    - ${{ inputs.openapi_doc_auth_header }}
    - ${{ inputs.openapi_doc_auth_token }}
    - ${{ inputs.mode }}
    - ${{ inputs.action }}
    - ${{ inputs.branch_name }}
    - ${{ inputs.previous_gen_version }}
    - ${{ inputs.openapi_docs }}
    - ${{ inputs.output_tests }}
    - ${{ inputs.write_suggestions }}
    - ${{ inputs.working_directory }}
