# action.yml
name: Speakeasy SDK Workflow Runner Action (alpha)
description: The Speakeasy Generation Action isto be run via the workflows provided in this repo and is not intended to be run directly.
inputs:
  speakeasy_version:
    description: The version of the Speakeasy CLI to use or "latest"
    default: latest
    required: false
  github_access_token:
    description: A GitHub access token with write access to the repo
    required: true
  speakeasy_api_key:
    description: "The Speakeasy API key to authenticate the Speakeasy CLI with"
    required: true
  openapi_doc_auth_token:
    description: "An auth token to authenticate with a private OpenAPI spec"
    required: false
  force:
    description: "Force the SDK to be regenerated"
    default: "false"
    required: false
  target:
    description: "Generate a specific target by name"
    required: false
  max_suggestions:
    description: "The maximum number of suggestions to apply when using the 'suggest' action step."
    default: "5"
    required: false
  mode:
    description: |-
      The mode to run the workflow in when using the 'generate' action, valid options are 'direct' or 'pr', defaults to 'direct'.
      This is intended to be used along with the `action` input to determine the current action step to run.
        - 'direct' mode will generally create a branch to generate the SDK on then merge this directly to the branch the workflow is configure to run on (normally 'main' or 'master') after compilation is successful.
        - 'pr' will create a branch to generate the SDK on then create a pull request to merge this branch to the branch the workflow is configure to run on (normally 'main' or 'master') after compilation is successful.
      See documentation for more details.
    default: "direct"
    required: false
  action:
    description: |-
      The current action step to run, valid options are 'validate', 'run-workflow', 'suggest', 'finalize', 'finalize-suggestion', or 'release', defaults to 'run-workflow'.
      This is intended to be used along with the `mode` input to determine the current action step to run.
        - 'validate' will validate the OpenAPI document and return addressable warnings and errors.
        - 'run-workflow' will generate the SDK and commit the changes to the branch.
        - 'suggest' will apply suggestions to the OpenAPI document and commit the changes to the branch.
        - 'finalize' depending on mode will either merge the branch to the branch the workflow is configure to run on (normally 'main' or 'master') or create a pull request.
        - 'finalize-suggestion' will create a pull request with the suggestions from the LLM model.
        - 'release' will create a release on Github.
  branch_name:
    description: "The name of the branch to finalize, only used for the 'finalize' action step."
    required: false
  cli_output:
    description: "Output of `speakeasy suggest` CLI command, only used for the 'finalize-suggestion' action step."
    required: false
  previous_gen_version:
    description: "The version of the previous generation, only used for the 'finalize' action step."
    required: false
  output_tests:
    description: "Internal use only"
    required: false
  speakeasy_server_url:
    description: "Internal use only"
    required: false
  openai_api_key:
    description: "The OpenAI API key to authenticate to access LLM suggestions. If left empty it will use Speakeasy's key within platform limits."
    required: false
  working_directory:
    description: "The working directory for running Speakeasy CLI commands in the action"
    required: false
  gpg_fingerprint:
    description: "The GPG fingerprint to sign the release with"
    required: false
outputs:
  publish_python:
    description: "Whether the Python SDK will be published to PyPi"
  publish_typescript:
    description: "Whether the Typescript SDK will be published to NPM"
  publish_terraform:
    description: "Whether the Terraform Provider will be published to the Terraform Registry"
  publish_php:
    description: "Whether the PHP SDK will be published to Packagist this will also create a release on Github"
  publish_ruby:
    description: "Whether the Ruby SDK will be published to Rubygems"
  publish_java:
    description: "Whether the Java SDK will be published to the provided OSSRH URL"
  publish_csharp:
    description: "Whether the C# SDK will be published to Nuget"
  python_regenerated:
    description: "true if the Python SDK was regenerated"
  python_directory:
    description: "The directory the Python SDK was generated to"
  typescript_regenerated:
    description: "true if the Typescript SDK was regenerated"
  typescript_directory:
    description: "The directory the Typescript SDK was generated to"
  go_regenerated:
    description: "true if the Go SDK was regenerated"
  go_directory:
    description: "The directory the Go SDK was generated to"
  java_regenerated:
    description: "true if the Java SDK was regenerated"
  java_directory:
    description: "The directory the Java SDK was generated to"
  terraform_regenerated:
    description: "true if the Terraform Provider was regenerated"
  terraform_directory:
    description: "The directory the Terraform Provider was generated to"
  php_regenerated:
    description: "true if the PHP SDK was regenerated"
  php_directory:
    description: "The directory the PHP SDK was generated to"
  ruby_regenerated:
    description: "true if the Ruby SDK was regenerated"
  ruby_directory:
    description: "The directory the Ruby SDK was generated to"
  csharp_regenerated:
    description: "true if the C# SDK was regenerated"
  csharp_directory:
    description: "The directory the C# SDK was generated to"
  unity_regenerated:
    description: "true if the Unity SDK was regenerated"
  unity_directory:
    description: "The directory the Unity SDK was generated to"
  swift_regenerated:
    description: "true if the Swift SDK was regenerated"
  swift_directory:
    description: "The directory the Swift SDK was generated to"
  docs_regenerated:
    description: "true if SDK docs were regenerated"
  docs_directory:
    description: "The directory the SDK docs was generated to"
  branch_name:
    description: "The name of the branch the SDK was generated or spec was modified on"
  cli_output:
    description: "Output of the CLI command issued in the `suggest` action"
  commit_hash:
    description: "The commit hash of the merge commit into main if using 'direct' mode"
  previous_gen_version:
    description: "The version of the previous generation"
  openapi_doc:
    description: "The location of the OpenAPI document used for generation"
runs:
  using: "docker"
  image: "docker://ghcr.io/speakeasy-api/sdk-generation-action:v15"
  env:
    SPEAKEASY_API_KEY: ${{ inputs.speakeasy_api_key }}
    SPEAKEASY_SERVER_URL: ${{ inputs.speakeasy_server_url }}
    OPENAI_API_KEY: ${{ inputs.openai_api_key }}
  args:
    - ${{ inputs.speakeasy_version }}
    - ${{ inputs.github_access_token }}
    - ${{ inputs.docs_languages }}
    - ${{ inputs.max_suggestions }}
    - ${{ inputs.mode }}
    - ${{ inputs.action }}
    - ${{ inputs.branch_name }}
    - ${{ inputs.cli_output }}
    - ${{ inputs.previous_gen_version }}
    - ${{ inputs.openapi_doc_output }}
    - ${{ inputs.output_tests }}
    - ${{ inputs.working_directory }}
    - ${{ inputs.gpg_fingerprint }}
    - ${{ inputs.openapi_doc_auth_token }}
    - ${{ inputs.target }}
